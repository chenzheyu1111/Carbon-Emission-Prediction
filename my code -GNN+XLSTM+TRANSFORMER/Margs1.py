# -*- coding:utf-8 -*-
import argparse
import torch


def args_parser():
    # parser = argparse.ArgumentParser()
    # parser.add_argument('--epochs', type=int, default=50, help='training epochs')
    # parser.add_argument('--input_size', type=int, default=14, help='input dimension__num_features')###输入维度
    # parser.add_argument('--seq_len', type=int, default=36, help='seq len')
    # parser.add_argument('--pre_len', type=int, default=1, help='seq len')
    # parser.add_argument('--output_size', type=int, default=14, help='output dimension')
    # parser.add_argument('--hidden_size', type=int, default=11, help='hidden size')
    # parser.add_argument('--out_channels', type=int, default=7, help='out channels')
    # parser.add_argument('--num_layers', type=int, default=2, help='num layers')
    # parser.add_argument('--lr', type=float, default=0.01, help='learning rate')
    # parser.add_argument('--batch_size', type=int, default=64, help='batch size')
    # parser.add_argument('--optimizer', type=str, default='adam', help='type of optimizer')
    # parser.add_argument('--add_att', type=bool, default=False, help='add attention?')
    # parser.add_argument('--device', default=torch.device("cuda" if torch.cuda.is_available() else "cpu"))
    # parser.add_argument('--weight_decay', type=float, default=1e-4, help='weight decay')
    # parser.add_argument('--bidirectional', type=bool, default=True, help='')
    # parser.add_argument('--step_size', type=int, default=150, help='step size')
    # parser.add_argument('--gamma', type=float, default=0.5, help='gamma')
    # parser.add_argument('--nheads', type=int, default=2, help='Number of head attentions.')
    # parser.add_argument('--alpha', type=float, default=0.2, help='Alpha for the leaky_relu.')
    # parser.add_argument('--learn_rate', type=float, default=0.1, help='learn_rate')
    # parser.add_argument('--num_blocks', type=int, default=2, help='num_blocks')
    # parser.add_argument('--dropout_rate', type=float, default=0.01, help='dropout_rate')
    # parser.add_argument('--num_heads', type=int, default=1, help='num_heads')
    # parser.add_argument('--embed_dim', type=int, default=4, help='embed_dim')
    # parser.add_argument('--dense_dim', type=int, default=4, help='dense_dim')
    # # parser.add_argument('--look_back', type=int, default=24, help='look_back')
    # # parser.add_argument('--T', type=int, default=14, help='T')
    # args = parser.parse_args(args=[])
    # ###len=1
    # parser = argparse.ArgumentParser()
    # parser.add_argument('--epochs', type=int, default=50, help='training epochs')
    # parser.add_argument('--input_size', type=int, default=14, help='input dimension__num_features')###输入维度
    # parser.add_argument('--seq_len', type=int, default=24, help='seq len')
    # parser.add_argument('--pre_len', type=int, default=3, help='seq len')
    # parser.add_argument('--output_size', type=int, default=14, help='output dimension')
    # parser.add_argument('--hidden_size', type=int, default=20, help='hidden size')
    # parser.add_argument('--out_channels', type=int, default=14, help='out channels')
    # parser.add_argument('--num_layers', type=int, default=1, help='num layers')
    # parser.add_argument('--lr', type=float, default=0.01, help='learning rate')
    # parser.add_argument('--batch_size', type=int, default=64, help='batch size')
    # parser.add_argument('--optimizer', type=str, default='adam', help='type of optimizer')
    # parser.add_argument('--add_att', type=bool, default=False, help='add attention?')
    # parser.add_argument('--device', default=torch.device("cuda" if torch.cuda.is_available() else "cpu"))
    # parser.add_argument('--weight_decay', type=float, default=1e-4, help='weight decay')
    # parser.add_argument('--bidirectional', type=bool, default=True, help='')
    # parser.add_argument('--step_size', type=int, default=150, help='step size')
    # parser.add_argument('--gamma', type=float, default=0.5, help='gamma')
    # parser.add_argument('--nheads', type=int, default=1, help='Number of head attentions.')
    # parser.add_argument('--alpha', type=float, default=0.2, help='Alpha for the leaky_relu.')
    # parser.add_argument('--learn_rate', type=float, default=0.1, help='learn_rate')
    # parser.add_argument('--num_blocks', type=int, default=1, help='num_blocks')
    # parser.add_argument('--dropout_rate', type=float, default=0.01, help='dropout_rate')
    # parser.add_argument('--num_heads', type=int, default=1, help='num_heads')
    # parser.add_argument('--embed_dim', type=int, default=8, help='embed_dim')
    # parser.add_argument('--dense_dim', type=int, default=8, help='dense_dim')
    # #parser.add_argument('--look_back', type=int, default=36, help='look_back')
    # parser.add_argument('--T', type=int, default=14, help='T')
    # args = parser.parse_args(args=[])
    ###len=3
    parser = argparse.ArgumentParser()
    parser.add_argument('--epochs', type=int, default=30, help='training epochs')
    parser.add_argument('--input_size', type=int, default=14, help='input dimension__num_features')###输入维度
    parser.add_argument('--seq_len', type=int, default=24, help='seq len')
    parser.add_argument('--pre_len', type=int, default=5, help='seq len')
    parser.add_argument('--output_size', type=int, default=14, help='output dimension')
    parser.add_argument('--hidden_size', type=int, default=15, help='hidden size')
    parser.add_argument('--out_channels', type=int, default=14, help='out channels')
    parser.add_argument('--num_layers', type=int, default=1, help='num layers')
    parser.add_argument('--lr', type=float, default=0.01, help='learning rate')
    parser.add_argument('--batch_size', type=int, default=64, help='batch size')
    parser.add_argument('--optimizer', type=str, default='adam', help='type of optimizer')
    parser.add_argument('--add_att', type=bool, default=False, help='add attention?')
    parser.add_argument('--device', default=torch.device("cuda" if torch.cuda.is_available() else "cpu"))
    parser.add_argument('--weight_decay', type=float, default=1e-4, help='weight decay')
    parser.add_argument('--bidirectional', type=bool, default=True, help='')
    parser.add_argument('--step_size', type=int, default=150, help='step size')
    parser.add_argument('--gamma', type=float, default=0.5, help='gamma')
    parser.add_argument('--nheads', type=int, default=1, help='Number of head attentions.')
    parser.add_argument('--alpha', type=float, default=0.2, help='Alpha for the leaky_relu.')
    parser.add_argument('--learn_rate', type=float, default=0.1, help='learn_rate')
    parser.add_argument('--num_blocks', type=int, default=1, help='num_blocks')
    parser.add_argument('--dropout_rate', type=float, default=0.01, help='dropout_rate')
    parser.add_argument('--num_heads', type=int, default=1, help='num_heads')
    parser.add_argument('--embed_dim', type=int, default=4, help='embed_dim')
    parser.add_argument('--dense_dim', type=int, default=4, help='dense_dim')
    parser.add_argument('--look_back', type=int, default=24, help='look_back')
    parser.add_argument('--T', type=int, default=14, help='T')
    args = parser.parse_args(args=[])
    return args
